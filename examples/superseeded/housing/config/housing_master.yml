# Housing Choice Model with Renting - Master Configuration
# =================================================
# This configuration combines all five stages of the housing-renting model
# with discrete choice, following the structure in housing_renting.md

name: "HousingMaster"
description: "Infinite horizon housing choice model with renting option and discrete housing grid"
version: "1.6.3"

# Reference to separate connections file
connections_file: "connections.yml"

# Model type and horizon specification
# Note: In future versions, we will support infinite horizon with reusable stages
model_type: "finite_horizon"  # Options: finite_horizon, infinite_horizon
horizon: 10                    # Number of periods to create (for finite horizon)

# Global parameters shared across all stages - Updated with Fella parameters
parameters:
  beta: 0.93            # Discount factor
  r: 0.0346             # Interest rate
  r_H: 0.0              # Housing return
  gamma_1: 0.0          # FELLA parameter
  xi: 0.0               # FELLA parameter
  alpha: 0.77           # Consumption weight in utility (theta in Fella)
  theta: 0.77           # Same as alpha, kept for consistency with Fella
  kappa: 0.077          # Housing service scaling factor
  iota: 0.001           # Housing service constant
  phi: 0.1             # Transaction cost for housing adjustment (Fella phi)
  delta: 0.0            # Depreciation rate
  b: 1e-100             # Borrowing constraint
  
  # Income shock parameters - Explicit Markov process from Fella
  # Transition matrix for Markov process
  #Pi:
  #  - [0.99, 0.01, 0]
  #  - [0.01, 0.98, 0.01]
  #  - [0, 0.09, 0.91]
  Pi:
    - [1]
    #- [0.01, 0.98, 0.01]
    #- [0, 0.09, 0.91]
  #z_vals: [0.2, 0.526, 4.66]  # Shock values
  z_vals: [1]
  
# Global settings shared across all stages
settings:
  tol: 1.0e-6           # Convergence tolerance
  max_iter: 1000        # Maximum iterations
  
  # Grid parameters - Updated from Fella
  a_min: 0.01           # Minimum asset value
  a_max: 30.0           # Maximum asset value (Fella's grid_max_A)
  a_points: 2000        # Number of asset grid points (Fella's grid_size)
  
  H_min: 0.0            # Minimum housing value
  H_max: 5.0            # Maximum housing value (Fella's grid_max_H)
  H_points: 5           # Number of housing grid points (Fella's grid_size_H)
  
  w_min: 0.01           # Minimum cash-on-hand
  w_max: 40.0           # Maximum cash-on-hand (increased to accommodate shock values)
  w_points: 2000        # Number of cash-on-hand grid points
  
  a_nxt_min: 0.01       # Minimum next-period asset value
  a_nxt_max: 30.0       # Maximum next-period asset value (matches a_max)
  a_nxt_points: 2000    # Number of next-period asset grid points
  
  # Income shock discretization - Now explicitly using Fella's values
  y_points: 3           # Number of shock grid points (length of z_vals)
  m_bar: 1.2            # Upper envelope parameter for FUES
  lb: 4                 # Look-back parameter for FUES

###################
# 2) .math Section
###################
math:
  functions:
    # Generic utility and marginal utility functions (shared across stages)
    owner_utility:
      expr: "alpha*np.log(c) + (1-alpha)*np.log(kappa*(H_nxt+iota))"
      description: "Utility function for owners"

    renter_utility:
      expr: "alpha*np.log(c) + (1-alpha)*np.log(kappa*(S+iota))"
      description: "Utility function for renters"

    marginal_utility:
      expr: "alpha/(c + 1e-10)"
      description: "Marginal utility of consumption with numerical stability"

    inv_marginal_utility:
      expr: "alpha/lambda_e"
      description: "Inverse marginal utility (EGM consumption function)"

    # Joint utility and marginal utility helpers
    owner_util_mutil:
      u_val: "alpha*np.log(c) + (1-alpha)*np.log(kappa*(H_nxt+iota))"
      uc_val: "alpha/(c + 1e-10)"
      description: "Returns both utility and marginal utility for owners"

    renter_util_mutil:
      u_val: "alpha*np.log(c) + (1-alpha)*np.log(kappa*(S+iota))"
      uc_val: "alpha/(c + 1e-10)"
      description: "Returns both utility and marginal utility for renters"
    
    # Override functions from master with local modifications
    uc_func:
      inherit: "uc_general"                   # Inherit but override expression
      expr: "alpha/(c + 1e-10)"               # Override with local modification
      description: "Modified marginal utility with numerical stability"
    
    # Functions that build on master patterns
    egm_consumption:
      inherit: "egm_consumption"              # Inherit but override expression
      expr: "alpha/(beta*lambda_v)"           # Adapt to local variable names
      description: "Adapted EGM consumption formula for local variables"
    
    # Purely local functions (no inheritance)
    u_func:
      expr: "alpha*np.log(c) + (1-alpha)*np.log(kappa*(H_nxt+iota))"
      description: "Stage-specific utility function for housing"
    
    # Complex operations
    egm_operations:
      c_egm: "alpha/(beta*lambda_e)"          # Uses pattern from egm_consumption
      m_egm: "c_egm + a_nxt"
      lambda_v_egm: "alpha/c_egm"
      vlu_v_egm: "alpha*np.log(c_egm) + (1-alpha)*np.log(kappa*(H_nxt+iota)) + beta*vlu_e"
      description: "Stage-specific EGM operations"
      compilation: "eval"

  constraints:
    budget:
      expr: "c <= w"
      description: "Budget constraint (no borrowing)"
    
    positive_consumption:
      expr: "c > 0"
      description: "Consumption must be positive"

# Global methods
methods:
  optimization: "EGM"
  simulation: "Histogram"
  integration_method: "discretize"
  shock_method: "markov"  # Changed to Markov since we're using explicit transition matrix
  compilation: 'eval'
  default_grid: 'linspace'

# dont need to import 
imports:
  - file: "OWNH_stage.yml"
    stage_name: "OwnerHousingChoice"
    alias: "OWNH"
  - file: "OWNC_stage.yml"
    stage_name: "OwnerConsumptionChoice"
    alias: "OWNC"
  